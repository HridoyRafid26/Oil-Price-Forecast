# -*- coding: utf-8 -*-
"""Oil_Price_Forecast.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1T-XYGeJHnTOQi5dyUHZdTNEAJmuy0FIC
"""

# Commented out IPython magic to ensure Python compatibility.
# Import required packages
# %matplotlib inline
import matplotlib
import seaborn as sns
import quandl
import numpy as np
import scipy as sp
import pandas as pd
import sklearn.linear_model
import sklearn.metrics
import statsmodels.api as sm
import matplotlib.pyplot as plt
import matplotlib.pylab as pylab
params = {'legend.fontsize': 'xx-large',
          'figure.figsize': (20, 15),
         'axes.labelsize': 'xx-large',
         'axes.titlesize':'xx-large',
         'xtick.labelsize':'xx-large',
         'ytick.labelsize':'xx-large'}
pylab.rcParams.update(params)

quandl.ApiConfig.api_key = 'xszj_ShXe7_Z6hgGpWd2'
oil = quandl.get('OPEC/ORB', start_date='2003-01-01', end_date='2019-08-24') # This creates pandas data frame

oil.head()

oil.tail()

oil.shape

oil.plot()

oil['Julian'] = oil.index.to_julian_date()
oil = sm.add_constant(oil) # Add a constant field for the linear regression

oil.head()

oil.tail()

oil.shape

from sklearn.linear_model import LinearRegression
from sklearn.svm import SVR
import matplotlib.pyplot as plt

future_days = []
future_price = []

# Create model

days = oil["Julian"].to_frame()
price = oil["Value"].to_frame()

linear = LinearRegression().fit(days, price)
svr_rbf = SVR(kernel='rbf', C=1e3, gamma=0.0001).fit(days, price)

# Extend a number of days for forecasting the future 
last_day = 2458717.5
for i in range(1, 777):
    future_days.append([last_day + i])
    future_price.append(np.nan)

    
# Convert back to float, so, divide every element by 100
linear_pred = list(map(lambda x: float(x), linear.predict(days)))
linear_pred_future = list(map(lambda x: float(x), linear.predict(future_days)))
svr_rbf_pred = list(map(lambda x: float(x), svr_rbf.predict(days)))
svr_rbf_pred_future = list(map(lambda x: float(x), svr_rbf.predict(future_days)))

# Plot data out
plt.plot(days, price, color='black', label='Oil Price')
plt.plot(days, linear_pred, color='blue', label='Linear Regressoin')
plt.plot(future_days, linear_pred_future, color='blue')
plt.plot(days, svr_rbf_pred, color='red', label='Support Vector Regression RBF')
plt.plot(future_days, svr_rbf_pred_future, color='red')
plt.xlabel('Julian Date')
plt.ylabel('Oil Price (USD)')
plt.legend(loc='best')
plt.show()

# We can actually train a simple exponential model using the log(value), then train further models on the error.
exponential_model = sklearn.linear_model.Ridge().fit( 
    X=oil[['Julian', 'const']], 
    y=np.log(oil['Value'])
)

exp_model_df = oil
exp_model_df['Exponential_Model'] = np.exp(exponential_model.predict(oil[['Julian', 'const']]))
exp_model_df['Log_Error_Exponential'] = np.log(oil['Value'] / oil['Exponential_Model'])

oil.head()

exp_model_df[['Value', 'Exponential_Model']].plot()

from statsmodels.tsa.stattools import adfuller
def test_stationarity(timeseries):
    
    #Determing rolling statistics
    #rolmean = pd.rolling_mean(timeseries, window=365) 
    rolmean=pd.Series(timeseries).rolling(window=365).mean()
    #rolstd = pd.rolling_std(timeseries, window=365)
    rolstd=pd.Series(timeseries).rolling(window=365).std()

    #Plot rolling statistics:
    orig = plt.plot(timeseries, color='blue',label='Original')
    mean = plt.plot(rolmean, color='red', label='Rolling Mean')
    std = plt.plot(rolstd, color='black', label = 'Rolling Std')
    plt.legend(loc='best')
    plt.title('Rolling Mean & Standard Deviation')
    plt.show(block=False)
    
    #Perform Dickey-Fuller test:
    print ('Results of Dickey-Fuller Test:')
    dftest = adfuller(timeseries, autolag='AIC')
    dfoutput = pd.Series(dftest[0:4], index=['Test Statistic','p-value','#Lags Used','Number of Observations Used'])
    for key,value in dftest[4].items():
        dfoutput['Critical Value (%s)'%key] = value
    print (dfoutput)

test_stationarity(oil['Value'])

from statsmodels.tsa.seasonal import seasonal_decompose

ts_log = np.log(oil['Value'])

decomposition = seasonal_decompose(ts_log, freq = 365)

trend = decomposition.trend
seasonal = decomposition.seasonal
residual = decomposition.resid

plt.subplot(411)
plt.plot(ts_log, label='Original')
plt.legend(loc='best')
plt.subplot(412)
plt.plot(trend, label='Trend')
plt.legend(loc='best')
plt.subplot(413)
plt.plot(seasonal,label='Seasonality')
plt.legend(loc='best')
plt.subplot(414)
plt.plot(residual, label='Residuals')
plt.legend(loc='best')
plt.tight_layout()

ts_decompose = residual
ts_decompose.dropna(inplace=True)
test_stationarity(ts_decompose)

from statsmodels.graphics.tsaplots import plot_acf
plot_acf(oil['Value'])
plt.show()

plot_acf(oil['Value'], lags=5)
plt.show()

from statsmodels.graphics.tsaplots import plot_pacf
plot_pacf(oil['Value'],lags=10)
plt.show()

from statsmodels.tsa.arima_model import ARIMA
model = ARIMA(oil.Value, order=(2, 1, 1))  
results_ARIMA = model.fit(disp=-1)

len(oil.Value)

arima_pred = results_ARIMA.predict(oil['Value'].index[3500], oil['Value'].index[-1], typ="levels")

plt.plot(oil.Value, label='Original')
plt.plot(arima_pred, label='Prediction')
plt.legend(loc=2)
plt.title('RMSE: %.4f'% np.sqrt(sum((arima_pred-oil.Value[3500:])**2)/len(oil.Value[3500:])))

print(oil.Value)

print(arima_pred)

